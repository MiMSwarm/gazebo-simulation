<?xml version="1.0"?>
<sdf version="1.5">
    <model name="velodyne">

      
      <!-- Give the base link a unique name -->
      <link name="base">
        
        <!-- Offset the base by half the length of the cylinder -->
        <pose>0 0 0.029335 0 0 0</pose>
        <inertial>
          <mass>1.2</mass>
          <inertia>
            <ixx>0.001087473</ixx>
            <iyy>0.001087473</iyy>
            <izz>0.001092437</izz>
            <ixy>0</ixy>
            <ixz>0</ixz>
            <iyz>0</iyz>
          </inertia>
        </inertial>
        
        <collision name="base_collision">
          <geometry>
            <cylinder>
              <!-- Radius and length provided by Velodyne -->
              <radius>.04267</radius>
              <length>.05867</length>
            </cylinder>
          </geometry>
        </collision>
        
        <!-- The visual is mostly a copy of the collision -->
        <visual name="base_visual">
          <!-- Offset visual by half of height. -->
          <pose>0 0 -0.029335 0 0 0</pose>
          <geometry>
            <mesh>
              <uri>model://velodyne_hdl32/meshes/velodyne_base.dae</uri>
            </mesh>
          </geometry>
        </visual>
      </link>

      
      <!-- Give the top link a unique name -->
      <link name="top">
        <!-- Verticall offset the top cylinder by the length of the bottom
          cylinder and half the length of this cylinder. -->
        <pose>0 0 0.095455 0 0 0</pose>
        
        <inertial>
          <mass>0.1</mass>
          <inertia>
            <ixx>0.000090623</ixx>
            <iyy>0.000090623</iyy>
            <izz>0.000091036</izz>
            <ixy>0</ixy>
            <ixz>0</ixz>
            <iyz>0</iyz>
          </inertia>
        </inertial>
        
        <collision name="top_collision">
          <geometry>
            <cylinder>
              <!-- Radius and length provided by Velodyne -->
              <radius>0.04267</radius>
              <length>0.07357</length>
            </cylinder>
          </geometry>
        </collision>
        
        <!-- The visual is mostly a copy of the collision -->
        <visual name="top_visual">
          <!-- Lower the mesh by half the height, and rotate by 90 degrees -->
          <pose>0 0 -0.0376785 0 0 1.5707</pose>
          <geometry>
            <mesh>
              <!-- The "model:"" URI scheme indicates we are referencing a
                gazebo model -->
              <uri>model://velodyne_hdl32/meshes/velodyne_top.dae</uri>
            </mesh>
          </geometry>
        </visual>
        
        <!-- Add a ray sensor and give it a unique name -->
        <sensor type="ray" name="sensor">
          <!-- Position the ray sensor based on the specs. Rotate by 90 degrees
            around the X-axis so that the <horizontal> rays become vertical -->
          <pose>0 0 -0.004645 1.5707 0 0</pose>
          <!-- Enable visualization to see the rays in the GUI -->
          <visualize>true</visualize>
          <!-- Set update rate of sensor -->
          <update_rate>30</update_rate>
          
          <ray>
            <!-- The scan element contains the horizontal and vertical beams.
                    We are leaving out the vertical beams for this tutorial. -->
            <scan>
              <horizontal>
                <!-- The velodyne has 32 beams (samples) -->
                <samples>32</samples>
                <!-- Resolution is multiplied by samples to determine the number
                        of simulated beams vs. interpolated beams. -->
                <resolution>1</resolution>
                <!-- Min. and max. angle in rads -->
                <min_angle>-0.53529248</min_angle>
                <max_angle>0.18622663</max_angle>
              </horizontal>
            </scan>
            <!-- Range defines characteristics of individual beam -->
            <range>
              <!-- Min. and max. distance of the beam -->
              <min>0.05</min>
              <max>70</max>
              <!-- Linear resolution of the beam -->
              <resolution>0.02</resolution>
            </range>
            <!-- Gaussian noise -->
            <noise>
              <type>gaussian</type>
              <mean>0.0</mean>
              <stddev>0.02</stddev>
            </noise>
          </ray>

        </sensor>

      </link>


      <!-- Each joint must have a unique name -->
      <joint type="revolute" name="joint">
        <!-- Position the joint at the bottom of the top link -->
        <pose>0 0 -0.036785 0 0 0</pose>
        <parent>base</parent>
        <child>top</child>
        <!-- The axis defines the joint's degree of freedom (z-axis here) -->
        <axis>
          <xyz>0 0 1</xyz>
          <!-- Limit refers to the range of motion of the joint
            Use a very large number to indicate a continuous revolution -->
          <limit>
            <lower>-10000000000000000</lower>
            <upper>10000000000000000</upper>
          </limit>
        </axis>
      </joint>


    </model>
</sdf>